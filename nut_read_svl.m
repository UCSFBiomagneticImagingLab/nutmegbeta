function [SAMimage, coords, params] = nut_read_svl(filename)
% [SAMimage, coords] = nut_read_svl(filename)
% 
% Reads SAM image from a SVL file (generated by CTF's SAMsrc)
% Returns SAMimage as voxels x 1 array of intensities
% coords contains corresponding voxel locations

fid=fopen(filename,'r','b');
identity = transpose(fread(fid,8,'uint8=>char'));
if(~strcmp(identity,'SAMIMAGE'))
    error('This doesn''t look like a SAM IMAGE file.');
end
vers = fread(fid,1,'int32');
setname = fread(fid,256,'uint8=>char');
numchans = fread(fid,1,'int32');
numweights = fread(fid,1,'int32');
if(numweights ~= 0)
    warning('This file looks funky.');
end
padbytes1 = fread(fid,1,'int32');
xstart = fread(fid,1,'double');
xend = fread(fid,1,'double');
ystart = fread(fid,1,'double');
yend = fread(fid,1,'double');
zstart = fread(fid,1,'double');
zend = fread(fid,1,'double');
params.stepsize = fread(fid,1,'double');
params.hpfreq = fread(fid,1,'double');
params.lpfreq = fread(fid,1,'double');
params.bwfreq = fread(fid,1,'double');
params.meannoise = fread(fid,1,'double');
params.MRIname = transpose(fread(fid,256,'uint8=>char'));
nasion = fread(fid,3,'int32');
rightPA = fread(fid,3,'int32');
leftPA = fread(fid,3,'int32');
SAMtype = fread(fid,1,'int32');
SAMunit = fread(fid,1,'int32');
padbytes2 = fread(fid,1,'int32');
if(vers >= 2)
    nasion_meg = fread(fid,3,'double');
    rightPA_meg = fread(fid,3,'double');
    leftPA_meg = fread(fid,3,'double');
    SAMunitname = fread(fid,32,'uint8=>char');
end

SAMimage = fread(fid,inf,'double');

fclose(fid);

[meshz,meshy,meshx]=ndgrid(zstart:params.stepsize:zend,ystart:params.stepsize:yend,xstart:params.stepsize:xend);
coords = [meshx(:) meshy(:) meshz(:)];

